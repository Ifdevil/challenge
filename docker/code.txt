 boolean isError = false;
        while (true) {
            /* ==========、判断一 跳过指定位置开始寻找错误和换行符===========*/
            /*
            //可以判断是否小于'='在进去，如果有分支预测技术的话，会增加新能，=和\n成功的次数是20%
            if (data[++i] == '=') {
//                count[data[i + 2]]++;
                //TODO 可以更具字符出现频率，做逻辑上的先后顺序  u2.58 p 2.89 d 3.91
                if (data[i - 5] == '_' && (data[i + 1] != '2' || data[i + 2] != '0' || data[i + 3] != '0')
                        && data[i - 16] == 'h' && data[i - 15] == 't' && data[i - 14] == 't' && data[i - 13] == 'p'
                        && data[i - 12] == '.' && data[i - 11] == 's' && data[i - 10] == 't' && data[i - 9] == 'a'
                        && data[i - 8] == 't' && data[i - 7] == 'u' && data[i - 6] == 's'
                        && data[i - 4] == 'c' && data[i - 3] == 'o' && data[i - 2] == 'd' && data[i - 1] == 'e') {
                    isError = true;
                } else if (data[i + 1] == '1' && data[i - 5] == 'e' && data[i - 4] == 'r' && data[i - 3] == 'r' && data[i - 2] == 'o'
                        && data[i - 1] == 'r') {
                    isError = true;
                }
            } else if (data[i] == '\n') {
                break;
            }
           */

            /* ==========、判断二 假设错误出现在最后一个位置===========*/
            if (data[++i] == '\n') {
                if (data[i - 9] == '_' && (data[i - 3] != '2' || data[i - 2] != '0' || data[i - 1] != '0') &&
//                        data[i - 20] == 'h' && data[i - 19] == 't' && data[i - 18] == 't' && data[i - 17] == 'p' &&
                        data[i - 16] == '.' && data[i - 15] == 's' && data[i - 14] == 't' && data[i - 13] == 'a' &&
//                        data[i - 12] == 't' && data[i - 11] == 'u' && data[i - 10] == 's' &&
                        data[i - 8] == 'c' && data[i - 7] == 'o' && data[i - 6] == 'd' && data[i - 5] == 'e' &&
                        data[i - 4] == '=') {
                    isError = true;
                    System.out.println(new String(data, i - 30, i));
                } else if (data[i - 7] == 'e' && data[i - 6] == 'r' &&
//                        data[i - 5] == 'r' && data[i - 4] == 'o' &&
                        data[i - 3] == 'r' && data[i - 2] == '=' && data[i - 1] == '1') {
                    isError = true;
                    System.out.println(new String(data, i - 30, i));
                }
                break;
            }
        }



 String line = new String(data, s, i - s - 1);
            String arr[] = line.split("\\|");
            try {
                String query = arr[8];
                String item[] = query.split("&");
                for (int j = 0; j < item.length; j++) {
                    params.add(item[j]);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }